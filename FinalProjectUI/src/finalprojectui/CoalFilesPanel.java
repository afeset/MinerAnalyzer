/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package finalprojectui;

import finalprojectui.Entities.Pair;
import java.awt.Dimension;
import java.util.List;
import java.util.Vector;
import javax.swing.*;

/**
 *
 * @author dell
 */
public class CoalFilesPanel extends javax.swing.JPanel {
    public Vector<Pair<Integer,String>> _files;
    /**
     * Creates new form ColeFilesPanel
     */
    public CoalFilesPanel() {
        initComponents();
        this.setMinimumSize(new Dimension(170,50));
        _files=new Vector<Pair<Integer,String>>();
    }
    
    //Adds the given coal file to list
    public void addCoalFileToList(int id, String filePath)
    {
        coalFilesList.enable();
        if(_files.size()==0)
        {
            cleanFilesList();
        }
        DefaultListModel<String> model = new DefaultListModel<String>();
        ListModel currentList=coalFilesList.getModel();
        for(int i=0; i<currentList.getSize(); i++){
            model.addElement(currentList.getElementAt(i).toString());
        }
        model.addElement(filePath);
        coalFilesList.setModel(model);
        coalFilesList.setSelectedIndex(0);
        _files.add(new Pair<Integer,String>(id, filePath));
    }
    
    ///return the path to the current selected files
    public List<String> getCurrentSelectedFiles()
    {
        if(coalFilesList.isSelectionEmpty())
        {
            return new Vector<String>();
        }
        return (List<String>) coalFilesList.getSelectedValuesList();
    }
    
    
    
    ///return true if the given file path already exist on list, false otherwise.
    public boolean isFileExist(String filePath)
    {
        for(int i=0; i<_files.size();i++)
        {
            Pair<Integer,String> pair=_files.get(i);
            if(pair.getValue().equals(filePath))
            {
                return true;
            }
        }
        return false;
    }
    
    ///this function removed the current selected coal files.
    ///If no file is selected return false. Otherwise return true.
    public boolean removeCoalFiles()
    {
        if(coalFilesList.isSelectionEmpty())
        {
            return false;
        }
        boolean res=true;
        List<String> selectedFiles=coalFilesList.getSelectedValuesList();
        for(String filePath : selectedFiles)
        {
           res=res && removeCoalFile(filePath);
        }
        return res;
    }
    
    ///this function removed the current selected coal file.
    ///If no file is selected return false. Otherwise return true.
    public boolean removeCoalFile(String filePath)
    {
        for(int i=0; i<_files.size();i++)
        {
            Pair<Integer,String> pair=_files.get(i);
            if(pair.getValue().equals(filePath))
            {
                _files.removeElementAt(i);
                removeSelectedCoalFileFromModel(filePath);
                if(_files.size()==0)
                {
                    setToDefaultState();
                }
                return true;
            }
        }
        return true;
    
    }
    //Clean the files list to have no items at all.
    private void cleanFilesList()
    {
        DefaultListModel<String> model = new DefaultListModel<String>();
        coalFilesList.setModel(model);
        _files=new Vector<Pair<Integer,String>>();
    }
    ///Set the list to default state (no file have been loaded message).
    private void setToDefaultState()
    {
        String defaultMessage="No files have been loaded...";
        DefaultListModel<String> model = new DefaultListModel<String>();
        model.addElement(defaultMessage);
        coalFilesList.setModel(model);
        coalFilesList.disable();
    }
    
    //this function remove the given filePath from files list
    private void removeSelectedCoalFileFromModel(String filePath)
    {
        DefaultListModel<String> model = new DefaultListModel<String>();
        ListModel currentList=coalFilesList.getModel();
        for(int i=0; i<currentList.getSize(); i++){
            if(!(currentList.getElementAt(i).toString().equals(filePath)))
            {
                model.addElement(currentList.getElementAt(i).toString());
            }
        }
        coalFilesList.setModel(model);
        coalFilesList.setSelectedIndex(0);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        coalFilesList = new javax.swing.JList();

        coalFilesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "No files have be loaded..." };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        coalFilesList.setEnabled(false);
        jScrollPane1.setViewportView(coalFilesList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList coalFilesList;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
