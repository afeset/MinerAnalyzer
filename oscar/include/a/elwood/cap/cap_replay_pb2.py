# Generated by the protocol buffer compiler.  DO NOT EDIT!

from google.protobuf import descriptor
from google.protobuf import message
from google.protobuf import reflection
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)


DESCRIPTOR = descriptor.FileDescriptor(
  name='include/a/elwood/cap/cap_replay.proto',
  package='a.elwood.cap',
  serialized_pb='\n%include/a/elwood/cap/cap_replay.proto\x12\x0c\x61.elwood.cap\x1a)include/a/infra/net/util/ip_address.proto\x1a&include/a/infra/prov/definitions.proto\x1a\'include/a/elwood/elwood_interface.proto\"V\n\x0fReplayPacketGpb\x12\x1b\n\x10nanosecTimestamp\x18\x01 \x01(\x04:\x01\x30\x12\x0c\n\x04\x64\x61ta\x18\x02 \x01(\x0c\x12\x18\n\radapterNumber\x18\x03 \x01(\x04:\x01\x30\"\xc9\x03\n\x10\x43\x61pLoadingParams\x12\x41\n\x0cloadFromPath\x18\x01 \x01(\tB+\x8a\xb5\x18\'capture file in filesystem to load from\x12g\n\x06nameId\x18\x02 \x01(\tBW\x8a\xb5\x18Sname to assign identifyng the cap in elwood.if not set, derived from \'loadFromPath\'\x12k\n\x1bshouldAutoAnalyzeDirections\x18\x03 \x01(\x08:\x04trueB@\x8a\xb5\x18<do port analysis according to IP conversations.On by default\x12P\n\x19shouldAutoAnalyzeTcpFlows\x18\x04 \x01(\x08:\x04trueB\'\x8a\xb5\x18#do tcp flows analysis.On by default\x12J\n\x16trafficCharacteristics\x18\x05 \x01(\x0b\x32*.a.elwood.TrafficManagerCharacteristicsGpb\"\xb6\x02\n\x13IpSimpleReplacePair\x12X\n\x05oldIP\x18\x01 \x01(\x0b\x32\x18.a.net.util.IPAddressGpbB/\x8a\xb5\x18+old IP expected to be found in the cap file\x12Q\n\x05newIP\x18\x02 \x01(\x0b\x32\x18.a.net.util.IPAddressGpbB(\x8a\xb5\x18$new IP to replace the old when found\x12r\n\x1dshouldIncrementOMultipleTimes\x18\x03 \x01(\x08:\x04trueBE\x8a\xb5\x18\x41should this ip increment when specifying multiple times injection\"\xfb\n\n\x12\x43\x61pReplayParamsGpb\x12U\n\x06nameId\x18\x01 \x01(\tBE\x8a\xb5\x18\x41Unique short name identifier in the context of the other captures\x12\xbc\x01\n\x07gapType\x18\x02 \x01(\x0e\x32\x33.a.elwood.cap.CapReplayParamsGpb.InterPacketGapType:\tkFixDelayBk\x8a\xb5\x18gselect if to use original timestamps (kOriginalTimestamp) or a fixed interpacket gap. Default=kFixDelay\x12_\n\x0einterpacketgap\x18\x03 \x01(\x04:\x01\x30\x42\x44\x8a\xb5\x18@nanosec fix delay value when the InterPacketGapType is kFixDelay\x12z\n\x0eipReplacements\x18\x04 \x03(\x0b\x32!.a.elwood.cap.IpSimpleReplacePairB?\x8a\xb5\x18;pairs of original-IP and new-IP to replace during injection\x12;\n\tisReverse\x18\x05 \x01(\x08:\x05\x66\x61lseB!\x8a\xb5\x18\x1dinvert client server adapters\x12G\n\nnumOfTimes\x18\x06 \x01(\x04:\x01\x31\x42\x30\x8a\xb5\x18,replicate these injection \'numOfTimes\' times\x12\x43\n\x10\x61\x64\x61pterRemapping\x18\x07 \x03(\rB)\x8a\xb5\x18%a remapping vector of adapter numbers\x12\x66\n\x1dshouldReportObservedAddresses\x18\x08 \x01(\x08:\x05\x66\x61lseB8\x8a\xb5\x18\x34when set true, will report all observed IP addresses\x12s\n\x0bpacketRange\x18\t \x03(\x0b\x32/.a.elwood.cap.CapReplayParamsGpb.PacketRangeGpbB-\x8a\xb5\x18)packet indices list for partial injection\x12\x89\x01\n\nipChecksum\x18\n \x01(\x0e\x32-.a.elwood.cap.CapReplayParamsGpb.ChecksumType:\rkGoodChecksumB7\x8a\xb5\x18\x33\x62y default, fix ip header checksum  (kGoodChecksum)\x12\x8a\x01\n\x0btcpChecksum\x18\x0b \x01(\x0e\x32-.a.elwood.cap.CapReplayParamsGpb.ChecksumType:\rkGoodChecksumB7\x8a\xb5\x18\x33\x62y default, fix tcp header checksum (kGoodChecksum)\x1a\x34\n\x0ePacketRangeGpb\x12\x11\n\tfromIndex\x18\x01 \x01(\r\x12\x0f\n\x07toIndex\x18\x02 \x01(\r\";\n\x12InterPacketGapType\x12\x16\n\x12kOriginalTimestamp\x10\x01\x12\r\n\tkFixDelay\x10\x02\">\n\x0c\x43hecksumType\x12\t\n\x05kNone\x10\x01\x12\x11\n\rkGoodChecksum\x10\x02\x12\x10\n\x0ckBadChecksum\x10\x03\"u\n\x0eInfoPerPortGpb\x12\x12\n\nnumPackets\x18\x01 \x01(\x04\x12\x10\n\x08numBytes\x18\x02 \x01(\x04\x12=\n\tsrcIpList\x18\x03 \x03(\tB*\x8a\xb5\x18&a list of all source IP addresses seen\"+\n\nTcpFlowGpb\x12\x0e\n\x06\x66lowId\x18\x01 \x01(\x04\x12\r\n\x05tuple\x18\x02 \x01(\t\"\x94\x02\n\x0e\x43\x61ptureInfoGpb\x12\x13\n\x0bnumTcpFlows\x18\x01 \x01(\x04\x12&\n\x04\x66low\x18\x02 \x03(\x0b\x32\x18.a.elwood.cap.TcpFlowGpb\x12J\n\x0binfoOnPort0\x18\x03 \x01(\x0b\x32\x1c.a.elwood.cap.InfoPerPortGpbB\x17\x8a\xb5\x18\x13info seen on port 0\x12\\\n\x0binfoOnPort1\x18\x04 \x01(\x0b\x32\x1c.a.elwood.cap.InfoPerPortGpbB)\x8a\xb5\x18%info seen on port 1 (or other than 0)\x12\x1b\n\x13numBadParsedPackets\x18\x05 \x01(\x04')



_CAPREPLAYPARAMSGPB_INTERPACKETGAPTYPE = descriptor.EnumDescriptor(
  name='InterPacketGapType',
  full_name='a.elwood.cap.CapReplayParamsGpb.InterPacketGapType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    descriptor.EnumValueDescriptor(
      name='kOriginalTimestamp', index=0, number=1,
      options=None,
      type=None),
    descriptor.EnumValueDescriptor(
      name='kFixDelay', index=1, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=2321,
  serialized_end=2380,
)

_CAPREPLAYPARAMSGPB_CHECKSUMTYPE = descriptor.EnumDescriptor(
  name='ChecksumType',
  full_name='a.elwood.cap.CapReplayParamsGpb.ChecksumType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    descriptor.EnumValueDescriptor(
      name='kNone', index=0, number=1,
      options=None,
      type=None),
    descriptor.EnumValueDescriptor(
      name='kGoodChecksum', index=1, number=2,
      options=None,
      type=None),
    descriptor.EnumValueDescriptor(
      name='kBadChecksum', index=2, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=2382,
  serialized_end=2444,
)


_REPLAYPACKETGPB = descriptor.Descriptor(
  name='ReplayPacketGpb',
  full_name='a.elwood.cap.ReplayPacketGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='nanosecTimestamp', full_name='a.elwood.cap.ReplayPacketGpb.nanosecTimestamp', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='data', full_name='a.elwood.cap.ReplayPacketGpb.data', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value="",
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='adapterNumber', full_name='a.elwood.cap.ReplayPacketGpb.adapterNumber', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=179,
  serialized_end=265,
)


_CAPLOADINGPARAMS = descriptor.Descriptor(
  name='CapLoadingParams',
  full_name='a.elwood.cap.CapLoadingParams',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='loadFromPath', full_name='a.elwood.cap.CapLoadingParams.loadFromPath', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030\'capture file in filesystem to load from')),
    descriptor.FieldDescriptor(
      name='nameId', full_name='a.elwood.cap.CapLoadingParams.nameId', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030Sname to assign identifyng the cap in elwood.if not set, derived from \'loadFromPath\'')),
    descriptor.FieldDescriptor(
      name='shouldAutoAnalyzeDirections', full_name='a.elwood.cap.CapLoadingParams.shouldAutoAnalyzeDirections', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=True,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030<do port analysis according to IP conversations.On by default')),
    descriptor.FieldDescriptor(
      name='shouldAutoAnalyzeTcpFlows', full_name='a.elwood.cap.CapLoadingParams.shouldAutoAnalyzeTcpFlows', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=True,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030#do tcp flows analysis.On by default')),
    descriptor.FieldDescriptor(
      name='trafficCharacteristics', full_name='a.elwood.cap.CapLoadingParams.trafficCharacteristics', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=268,
  serialized_end=725,
)


_IPSIMPLEREPLACEPAIR = descriptor.Descriptor(
  name='IpSimpleReplacePair',
  full_name='a.elwood.cap.IpSimpleReplacePair',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='oldIP', full_name='a.elwood.cap.IpSimpleReplacePair.oldIP', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030+old IP expected to be found in the cap file')),
    descriptor.FieldDescriptor(
      name='newIP', full_name='a.elwood.cap.IpSimpleReplacePair.newIP', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030$new IP to replace the old when found')),
    descriptor.FieldDescriptor(
      name='shouldIncrementOMultipleTimes', full_name='a.elwood.cap.IpSimpleReplacePair.shouldIncrementOMultipleTimes', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=True,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030Ashould this ip increment when specifying multiple times injection')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=728,
  serialized_end=1038,
)


_CAPREPLAYPARAMSGPB_PACKETRANGEGPB = descriptor.Descriptor(
  name='PacketRangeGpb',
  full_name='a.elwood.cap.CapReplayParamsGpb.PacketRangeGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='fromIndex', full_name='a.elwood.cap.CapReplayParamsGpb.PacketRangeGpb.fromIndex', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='toIndex', full_name='a.elwood.cap.CapReplayParamsGpb.PacketRangeGpb.toIndex', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=2267,
  serialized_end=2319,
)

_CAPREPLAYPARAMSGPB = descriptor.Descriptor(
  name='CapReplayParamsGpb',
  full_name='a.elwood.cap.CapReplayParamsGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='nameId', full_name='a.elwood.cap.CapReplayParamsGpb.nameId', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030AUnique short name identifier in the context of the other captures')),
    descriptor.FieldDescriptor(
      name='gapType', full_name='a.elwood.cap.CapReplayParamsGpb.gapType', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=2,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030gselect if to use original timestamps (kOriginalTimestamp) or a fixed interpacket gap. Default=kFixDelay')),
    descriptor.FieldDescriptor(
      name='interpacketgap', full_name='a.elwood.cap.CapReplayParamsGpb.interpacketgap', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030@nanosec fix delay value when the InterPacketGapType is kFixDelay')),
    descriptor.FieldDescriptor(
      name='ipReplacements', full_name='a.elwood.cap.CapReplayParamsGpb.ipReplacements', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030;pairs of original-IP and new-IP to replace during injection')),
    descriptor.FieldDescriptor(
      name='isReverse', full_name='a.elwood.cap.CapReplayParamsGpb.isReverse', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030\035invert client server adapters')),
    descriptor.FieldDescriptor(
      name='numOfTimes', full_name='a.elwood.cap.CapReplayParamsGpb.numOfTimes', index=5,
      number=6, type=4, cpp_type=4, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030,replicate these injection \'numOfTimes\' times')),
    descriptor.FieldDescriptor(
      name='adapterRemapping', full_name='a.elwood.cap.CapReplayParamsGpb.adapterRemapping', index=6,
      number=7, type=13, cpp_type=3, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030%a remapping vector of adapter numbers')),
    descriptor.FieldDescriptor(
      name='shouldReportObservedAddresses', full_name='a.elwood.cap.CapReplayParamsGpb.shouldReportObservedAddresses', index=7,
      number=8, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\0304when set true, will report all observed IP addresses')),
    descriptor.FieldDescriptor(
      name='packetRange', full_name='a.elwood.cap.CapReplayParamsGpb.packetRange', index=8,
      number=9, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030)packet indices list for partial injection')),
    descriptor.FieldDescriptor(
      name='ipChecksum', full_name='a.elwood.cap.CapReplayParamsGpb.ipChecksum', index=9,
      number=10, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=2,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\0303by default, fix ip header checksum  (kGoodChecksum)')),
    descriptor.FieldDescriptor(
      name='tcpChecksum', full_name='a.elwood.cap.CapReplayParamsGpb.tcpChecksum', index=10,
      number=11, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=2,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\0303by default, fix tcp header checksum (kGoodChecksum)')),
  ],
  extensions=[
  ],
  nested_types=[_CAPREPLAYPARAMSGPB_PACKETRANGEGPB, ],
  enum_types=[
    _CAPREPLAYPARAMSGPB_INTERPACKETGAPTYPE,
    _CAPREPLAYPARAMSGPB_CHECKSUMTYPE,
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=1041,
  serialized_end=2444,
)


_INFOPERPORTGPB = descriptor.Descriptor(
  name='InfoPerPortGpb',
  full_name='a.elwood.cap.InfoPerPortGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='numPackets', full_name='a.elwood.cap.InfoPerPortGpb.numPackets', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='numBytes', full_name='a.elwood.cap.InfoPerPortGpb.numBytes', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='srcIpList', full_name='a.elwood.cap.InfoPerPortGpb.srcIpList', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030&a list of all source IP addresses seen')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=2446,
  serialized_end=2563,
)


_TCPFLOWGPB = descriptor.Descriptor(
  name='TcpFlowGpb',
  full_name='a.elwood.cap.TcpFlowGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='flowId', full_name='a.elwood.cap.TcpFlowGpb.flowId', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='tuple', full_name='a.elwood.cap.TcpFlowGpb.tuple', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=2565,
  serialized_end=2608,
)


_CAPTUREINFOGPB = descriptor.Descriptor(
  name='CaptureInfoGpb',
  full_name='a.elwood.cap.CaptureInfoGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='numTcpFlows', full_name='a.elwood.cap.CaptureInfoGpb.numTcpFlows', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='flow', full_name='a.elwood.cap.CaptureInfoGpb.flow', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='infoOnPort0', full_name='a.elwood.cap.CaptureInfoGpb.infoOnPort0', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030\023info seen on port 0')),
    descriptor.FieldDescriptor(
      name='infoOnPort1', full_name='a.elwood.cap.CaptureInfoGpb.infoOnPort1', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030%info seen on port 1 (or other than 0)')),
    descriptor.FieldDescriptor(
      name='numBadParsedPackets', full_name='a.elwood.cap.CaptureInfoGpb.numBadParsedPackets', index=4,
      number=5, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=2611,
  serialized_end=2887,
)

import include.a.infra.net.util.ip_address_pb2
import include.a.infra.prov.definitions_pb2
import include.a.elwood.elwood_interface_pb2

_CAPLOADINGPARAMS.fields_by_name['trafficCharacteristics'].message_type = include.a.elwood.elwood_interface_pb2._TRAFFICMANAGERCHARACTERISTICSGPB
_IPSIMPLEREPLACEPAIR.fields_by_name['oldIP'].message_type = include.a.infra.net.util.ip_address_pb2._IPADDRESSGPB
_IPSIMPLEREPLACEPAIR.fields_by_name['newIP'].message_type = include.a.infra.net.util.ip_address_pb2._IPADDRESSGPB
_CAPREPLAYPARAMSGPB_PACKETRANGEGPB.containing_type = _CAPREPLAYPARAMSGPB;
_CAPREPLAYPARAMSGPB.fields_by_name['gapType'].enum_type = _CAPREPLAYPARAMSGPB_INTERPACKETGAPTYPE
_CAPREPLAYPARAMSGPB.fields_by_name['ipReplacements'].message_type = _IPSIMPLEREPLACEPAIR
_CAPREPLAYPARAMSGPB.fields_by_name['packetRange'].message_type = _CAPREPLAYPARAMSGPB_PACKETRANGEGPB
_CAPREPLAYPARAMSGPB.fields_by_name['ipChecksum'].enum_type = _CAPREPLAYPARAMSGPB_CHECKSUMTYPE
_CAPREPLAYPARAMSGPB.fields_by_name['tcpChecksum'].enum_type = _CAPREPLAYPARAMSGPB_CHECKSUMTYPE
_CAPREPLAYPARAMSGPB_INTERPACKETGAPTYPE.containing_type = _CAPREPLAYPARAMSGPB;
_CAPREPLAYPARAMSGPB_CHECKSUMTYPE.containing_type = _CAPREPLAYPARAMSGPB;
_CAPTUREINFOGPB.fields_by_name['flow'].message_type = _TCPFLOWGPB
_CAPTUREINFOGPB.fields_by_name['infoOnPort0'].message_type = _INFOPERPORTGPB
_CAPTUREINFOGPB.fields_by_name['infoOnPort1'].message_type = _INFOPERPORTGPB

class ReplayPacketGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _REPLAYPACKETGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.cap.ReplayPacketGpb)

class CapLoadingParams(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _CAPLOADINGPARAMS
  
  # @@protoc_insertion_point(class_scope:a.elwood.cap.CapLoadingParams)

class IpSimpleReplacePair(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _IPSIMPLEREPLACEPAIR
  
  # @@protoc_insertion_point(class_scope:a.elwood.cap.IpSimpleReplacePair)

class CapReplayParamsGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  
  class PacketRangeGpb(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _CAPREPLAYPARAMSGPB_PACKETRANGEGPB
    
    # @@protoc_insertion_point(class_scope:a.elwood.cap.CapReplayParamsGpb.PacketRangeGpb)
  DESCRIPTOR = _CAPREPLAYPARAMSGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.cap.CapReplayParamsGpb)

class InfoPerPortGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _INFOPERPORTGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.cap.InfoPerPortGpb)

class TcpFlowGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _TCPFLOWGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.cap.TcpFlowGpb)

class CaptureInfoGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _CAPTUREINFOGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.cap.CaptureInfoGpb)

# @@protoc_insertion_point(module_scope)
