# Generated by the protocol buffer compiler.  DO NOT EDIT!

from google.protobuf import descriptor
from google.protobuf import message
from google.protobuf import reflection
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)


DESCRIPTOR = descriptor.FileDescriptor(
  name='include/a/elwood/elwood_interface.proto',
  package='a.elwood',
  serialized_pb='\n\'include/a/elwood/elwood_interface.proto\x12\x08\x61.elwood\x1a$include/a/infra/io/nic/nic_cfg.proto\x1a&include/a/infra/prov/definitions.proto\x1a$include/a/elwood/client/client.proto\"i\n\x06NicGpb\x12\x0c\n\x04name\x18\x01 \x01(\t\x12#\n\x06nicCfg\x18\x02 \x01(\x0b\x32\x13.a.io.nic.NicCfgGpb\x12,\n\x07nicType\x18\x03 \x01(\x0e\x32\x1b.a.io.nic.NicCfgGpb.NicType\"\xfa\x01\n\x0c\x45lwoodCfgGpb\x12\x1e\n\x04nics\x18\x01 \x03(\x0b\x32\x10.a.elwood.NicGpb\x12\x17\n\x0cnumOfWorkers\x18\x02 \x01(\r:\x01\x31\x12)\n\x0fredirectSniffer\x18\x07 \x03(\x0b\x32\x10.a.elwood.NicGpb\x12*\n\x06\x63lient\x18\x04 \x01(\x0b\x32\x1a.a.elwood.client.ClientGpb\x12\x1a\n\x0bisRelaxMode\x18\x05 \x01(\x08:\x05\x66\x61lse\x12>\n\x0cnumOfBuckets\x18\x06 \x01(\r:\x04\x31\x30\x30\x30\x42\"\x8a\xb5\x18\x1enumber of buckets for flows db\"\x95\x01\n\x0fInjectionStatus\x12@\n\x0bisInjecting\x18\x01 \x01(\x08\x42+\x8a\xb5\x18\'true means traffic is currently running\x12@\n\x16isCurrentlyDispatching\x18\x02 \x01(\x08\x42 \x8a\xb5\x18\x1ctrue means dispatching is on\"\xe2\x01\n TrafficManagerCharacteristicsGpb\x12P\n\x18limitConcurrentInstances\x18\x01 \x01(\x04\x42.\x8a\xb5\x18*limit concurrent instances. 0 is not limit\x12l\n\x15limitInterInstanceGap\x18\x02 \x01(\x04\x42M\x8a\xb5\x18Ilimit for the internal gap between instances (in nanosec). 0 is not limit\"\xdd\x01\n\x1fWorkerThreadTechnicianParamsGpb\x12\x44\n\x12txBurstElapsedTime\x18\x03 \x01(\x04\x42(\x8a\xb5\x18$*** elwood developer fine tuning ***\x12t\n\x0eshouldIgnoreRx\x18\x04 \x01(\x08\x42\\\x8a\xb5\x18X*** elwood developer fine tuning - don\'t read packets from rx to create backpressure ***')




_NICGPB = descriptor.Descriptor(
  name='NicGpb',
  full_name='a.elwood.NicGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='name', full_name='a.elwood.NicGpb.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='nicCfg', full_name='a.elwood.NicGpb.nicCfg', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='nicType', full_name='a.elwood.NicGpb.nicType', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=169,
  serialized_end=274,
)


_ELWOODCFGGPB = descriptor.Descriptor(
  name='ElwoodCfgGpb',
  full_name='a.elwood.ElwoodCfgGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='nics', full_name='a.elwood.ElwoodCfgGpb.nics', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='numOfWorkers', full_name='a.elwood.ElwoodCfgGpb.numOfWorkers', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='redirectSniffer', full_name='a.elwood.ElwoodCfgGpb.redirectSniffer', index=2,
      number=7, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='client', full_name='a.elwood.ElwoodCfgGpb.client', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='isRelaxMode', full_name='a.elwood.ElwoodCfgGpb.isRelaxMode', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='numOfBuckets', full_name='a.elwood.ElwoodCfgGpb.numOfBuckets', index=5,
      number=6, type=13, cpp_type=3, label=1,
      has_default_value=True, default_value=1000,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030\036number of buckets for flows db')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=277,
  serialized_end=527,
)


_INJECTIONSTATUS = descriptor.Descriptor(
  name='InjectionStatus',
  full_name='a.elwood.InjectionStatus',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='isInjecting', full_name='a.elwood.InjectionStatus.isInjecting', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030\'true means traffic is currently running')),
    descriptor.FieldDescriptor(
      name='isCurrentlyDispatching', full_name='a.elwood.InjectionStatus.isCurrentlyDispatching', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030\034true means dispatching is on')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=530,
  serialized_end=679,
)


_TRAFFICMANAGERCHARACTERISTICSGPB = descriptor.Descriptor(
  name='TrafficManagerCharacteristicsGpb',
  full_name='a.elwood.TrafficManagerCharacteristicsGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='limitConcurrentInstances', full_name='a.elwood.TrafficManagerCharacteristicsGpb.limitConcurrentInstances', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030*limit concurrent instances. 0 is not limit')),
    descriptor.FieldDescriptor(
      name='limitInterInstanceGap', full_name='a.elwood.TrafficManagerCharacteristicsGpb.limitInterInstanceGap', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030Ilimit for the internal gap between instances (in nanosec). 0 is not limit')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=682,
  serialized_end=908,
)


_WORKERTHREADTECHNICIANPARAMSGPB = descriptor.Descriptor(
  name='WorkerThreadTechnicianParamsGpb',
  full_name='a.elwood.WorkerThreadTechnicianParamsGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='txBurstElapsedTime', full_name='a.elwood.WorkerThreadTechnicianParamsGpb.txBurstElapsedTime', index=0,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030$*** elwood developer fine tuning ***')),
    descriptor.FieldDescriptor(
      name='shouldIgnoreRx', full_name='a.elwood.WorkerThreadTechnicianParamsGpb.shouldIgnoreRx', index=1,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030X*** elwood developer fine tuning - don\'t read packets from rx to create backpressure ***')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=911,
  serialized_end=1132,
)

import include.a.infra.io.nic.nic_cfg_pb2
import include.a.infra.prov.definitions_pb2
import include.a.elwood.client.client_pb2

_NICGPB.fields_by_name['nicCfg'].message_type = include.a.infra.io.nic.nic_cfg_pb2._NICCFGGPB
_NICGPB.fields_by_name['nicType'].enum_type = include.a.infra.io.nic.nic_cfg_pb2._NICCFGGPB_NICTYPE
_ELWOODCFGGPB.fields_by_name['nics'].message_type = _NICGPB
_ELWOODCFGGPB.fields_by_name['redirectSniffer'].message_type = _NICGPB
_ELWOODCFGGPB.fields_by_name['client'].message_type = include.a.elwood.client.client_pb2._CLIENTGPB

class NicGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _NICGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.NicGpb)

class ElwoodCfgGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _ELWOODCFGGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.ElwoodCfgGpb)

class InjectionStatus(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _INJECTIONSTATUS
  
  # @@protoc_insertion_point(class_scope:a.elwood.InjectionStatus)

class TrafficManagerCharacteristicsGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _TRAFFICMANAGERCHARACTERISTICSGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.TrafficManagerCharacteristicsGpb)

class WorkerThreadTechnicianParamsGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _WORKERTHREADTECHNICIANPARAMSGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.WorkerThreadTechnicianParamsGpb)

# @@protoc_insertion_point(module_scope)
