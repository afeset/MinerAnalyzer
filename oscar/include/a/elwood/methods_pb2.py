# Generated by the protocol buffer compiler.  DO NOT EDIT!

from google.protobuf import descriptor
from google.protobuf import message
from google.protobuf import reflection
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)


DESCRIPTOR = descriptor.FileDescriptor(
  name='include/a/elwood/methods.proto',
  package='a.elwood',
  serialized_pb='\n\x1einclude/a/elwood/methods.proto\x12\x08\x61.elwood\x1a&include/a/infra/prov/definitions.proto\x1a%include/a/elwood/cap/cap_replay.proto\x1a\'include/a/elwood/core/definitions.proto\x1a,include/a/elwood/ptemplate/definitions.proto\x1a\x31include/a/elwood/ptemplate/payload_instance.proto\"\x8c\x01\n\x16LoadPayloadTemplateGpb\x12\x37\n\x02in\x18\x01 \x01(\x0b\x32+.a.elwood.ptemplate.PayloadTemplateSetupGpb\x12\x1c\n\x03out\x18\x02 \x01(\x0b\x32\x0f.a.prov.NullGpb:\x1b\x8a\xb5\x18\x17Load a payload template\"\x94\x01\n\x16LoadDefaultTemplateGpb\x12\x37\n\x02in\x18\x01 \x01(\x0b\x32+.a.elwood.ptemplate.PayloadTemplateSetupGpb\x12\x1c\n\x03out\x18\x02 \x01(\x0b\x32\x0f.a.prov.NullGpb:#\x8a\xb5\x18\x1fLoad a default payload template\"\xb0\x02\n\x17\x43lonePayloadTemplateGpb\x12\x34\n\x02in\x18\x01 \x01(\x0b\x32(.a.elwood.ClonePayloadTemplateGpb.InxGpb\x12\x1c\n\x03out\x18\x02 \x01(\x0b\x32\x0f.a.prov.NullGpb\x1a\x97\x01\n\x06InxGpb\x12I\n\x06nameId\x18\x01 \x01(\tB9\x8a\xb5\x18\x35Name to assign identifying the new template in elwood\x12\x42\n\x0esourceTemplate\x18\x02 \x01(\tB*\x8a\xb5\x18&Name of existing template to copy from:\'\x8a\xb5\x18#Copies an existing payload template\"\x90\x01\n\x18UnloadPayloadTemplateGpb\x12\x37\n\x02in\x18\x01 \x01(\x0b\x32+.a.elwood.ptemplate.PayloadTemplateSetupGpb\x12\x1c\n\x03out\x18\x02 \x01(\x0b\x32\x0f.a.prov.NullGpb:\x1d\x8a\xb5\x18\x19Unload a payload template\"\xf2\x01\n!UnloadMultiplePayloadTemplatesGpb\x12>\n\x02in\x18\x01 \x01(\x0b\x32\x32.a.elwood.UnloadMultiplePayloadTemplatesGpb.InxGpb\x12\x1c\n\x03out\x18\x02 \x01(\x0b\x32\x0f.a.prov.NullGpb\x1aH\n\x06InxGpb\x12>\n\ttemplates\x18\x01 \x03(\x0b\x32+.a.elwood.ptemplate.PayloadTemplateSetupGpb:%\x8a\xb5\x18!Unload multiple payload templates\"\xeb\x01\n\x1aIsPayloadTemplateLoadedGpb\x12\x37\n\x02in\x18\x01 \x01(\x0b\x32+.a.elwood.IsPayloadTemplateLoadedGpb.InxGpb\x12\x39\n\x03out\x18\x02 \x01(\x0b\x32,.a.elwood.IsPayloadTemplateLoadedGpb.OutxGpb\x1a\x18\n\x06InxGpb\x12\x0e\n\x06nameId\x18\x01 \x01(\t\x1a\x1b\n\x07OutxGpb\x12\x10\n\x08isLoaded\x18\x01 \x01(\x08:\"\x8a\xb5\x18\x1eIs the payload template loaded\"\xad\x01\n\x19LockTemplateForEditingGpb\x12\x36\n\x02in\x18\x01 \x01(\x0b\x32*.a.elwood.LockTemplateForEditingGpb.InxGpb\x12\x1c\n\x03out\x18\x02 \x01(\x0b\x32\x0f.a.prov.NullGpb\x1a\x18\n\x06InxGpb\x12\x0e\n\x06nameId\x18\x01 \x01(\t: \x8a\xb5\x18\x1cLock template before queuing\"\xa7\x01\n\x1fQueueTemplateForTransmissionGpb\x12\x39\n\x02in\x18\x01 \x01(\x0b\x32-.a.elwood.ptemplate.TemplateGenerateParamsGpb\x12\x1c\n\x03out\x18\x02 \x01(\x0b\x32\x0f.a.prov.NullGpb:+\x8a\xb5\x18\'Queue an injection of a loaded template\"\x8e\x02\n(QueueMultipleTemplatesForTransmissionGpb\x12\x45\n\x02in\x18\x01 \x01(\x0b\x32\x39.a.elwood.QueueMultipleTemplatesForTransmissionGpb.InxGpb\x12\x1c\n\x03out\x18\x02 \x01(\x0b\x32\x0f.a.prov.NullGpb\x1aJ\n\x06InxGpb\x12@\n\ttemplates\x18\x01 \x03(\x0b\x32-.a.elwood.ptemplate.TemplateGenerateParamsGpb:1\x8a\xb5\x18-Queue multiple injections of loaded templates\"\x81\x01\n\x12LoadCaptureFileGpb\x12*\n\x02in\x18\x01 \x01(\x0b\x32\x1e.a.elwood.cap.CapLoadingParams\x12\x1c\n\x03out\x18\x02 \x01(\x0b\x32\x0f.a.prov.NullGpb:!\x8a\xb5\x18\x1dload a capture file to memory\"\x87\x01\n\x14UnloadCaptureFileGpb\x12*\n\x02in\x18\x01 \x01(\x0b\x32\x1e.a.elwood.cap.CapLoadingParams\x12\x1c\n\x03out\x18\x02 \x01(\x0b\x32\x0f.a.prov.NullGpb:%\x8a\xb5\x18!unload a capture file from memory\"\xaf\x03\n\x16LoadCapturesFromDirGpb\x12\x33\n\x02in\x18\x01 \x01(\x0b\x32\'.a.elwood.LoadCapturesFromDirGpb.InxGpb\x12\x35\n\x03out\x18\x02 \x01(\x0b\x32(.a.elwood.LoadCapturesFromDirGpb.OutxGpb\x1a\xb2\x01\n\x06InxGpb\x12K\n\x0bloadFromDir\x18\x01 \x01(\tB6\x8a\xb5\x18\x32\x44irectory in filesystem to load from capture files\x12[\n\x15loadNonDupOnCollision\x18\x02 \x01(\x08:\x05\x66\x61lseB5\x8a\xb5\x18\x31Load the non-duplicates incase of name collision \x1a?\n\x07OutxGpb\x12\x34\n\x07nameIds\x18\x01 \x03(\tB#\x8a\xb5\x18\x1fName IDs of all loaded captures:3\x8a\xb5\x18/load all capture files from directory to memory\"\xdb\x01\n\x16IsCaptureFileLoadedGpb\x12\x33\n\x02in\x18\x01 \x01(\x0b\x32\'.a.elwood.IsCaptureFileLoadedGpb.InxGpb\x12\x35\n\x03out\x18\x02 \x01(\x0b\x32(.a.elwood.IsCaptureFileLoadedGpb.OutxGpb\x1a\x18\n\x06InxGpb\x12\x0e\n\x06nameId\x18\x01 \x01(\t\x1a\x1b\n\x07OutxGpb\x12\x10\n\x08isLoaded\x18\x01 \x01(\x08:\x1e\x8a\xb5\x18\x1aIs the capture file loaded\"\xb1\x01\n\x1eQueueCaptureForTransmissionGpb\x12,\n\x02in\x18\x01 \x01(\x0b\x32 .a.elwood.cap.CapReplayParamsGpb\x12\x1c\n\x03out\x18\x02 \x01(\x0b\x32\x0f.a.prov.NullGpb:C\x8a\xb5\x18?queue an injection of a capture file already loaded into memory\"\x99\x02\n\x12LoadContentFileGpb\x12/\n\x02in\x18\x01 \x01(\x0b\x32#.a.elwood.LoadContentFileGpb.InxGpb\x12\x1c\n\x03out\x18\x02 \x01(\x0b\x32\x0f.a.prov.NullGpb\x1a\x90\x01\n\x06InxGpb\x12\x43\n\x0esourceFilename\x18\x01 \x01(\tB+\x8a\xb5\x18\'content file in filesystem to load from\x12\x41\n\x06nameId\x18\x02 \x01(\tB1\x8a\xb5\x18-name to assign identifyng the file in elwood.:!\x8a\xb5\x18\x1dload a content file to memory\"\xdb\x01\n\x16IsContentFileLoadedGpb\x12\x33\n\x02in\x18\x01 \x01(\x0b\x32\'.a.elwood.IsContentFileLoadedGpb.InxGpb\x12\x35\n\x03out\x18\x02 \x01(\x0b\x32(.a.elwood.IsContentFileLoadedGpb.OutxGpb\x1a\x18\n\x06InxGpb\x12\x0e\n\x06nameId\x18\x01 \x01(\t\x1a\x1b\n\x07OutxGpb\x12\x10\n\x08isLoaded\x18\x01 \x01(\x08:\x1e\x8a\xb5\x18\x1aIs the content file loaded\"\x9b\x01\n\x18GetLineWorkerCountersGpb\x12\x1b\n\x02in\x18\x01 \x01(\x0b\x32\x0f.a.prov.NullGpb\x12\x33\n\x03out\x18\x02 \x01(\x0b\x32&.a.elwood.core.LineWorkerStatisticsGpb:-\x8a\xb5\x18)retrieve line workers statictics counters\"\x91\x01\n\x1fStopTrafficAndClearInstancesGpb\x12\x1b\n\x02in\x18\x01 \x01(\x0b\x32\x0f.a.prov.NullGpb\x12\x1c\n\x03out\x18\x02 \x01(\x0b\x32\x0f.a.prov.NullGpb:3\x8a\xb5\x18/Terminates all line instances and live sessions\"\xc8\x01\n\x19StopTrafficAndClearAllGpb\x12\x1b\n\x02in\x18\x01 \x01(\x0b\x32\x0f.a.prov.NullGpb\x12\x1c\n\x03out\x18\x02 \x01(\x0b\x32\x0f.a.prov.NullGpb:p\x8a\xb5\x18lTerminates all line instances and live sessions, removes templates, captures and clients and clears counters\"q\n\x14GetInstancesStateGpb\x12\x1b\n\x02in\x18\x01 \x01(\x0b\x32\x0f.a.prov.NullGpb\x12-\n\x03out\x18\x02 \x01(\x0b\x32 .a.elwood.core.InstancesStateGpb:\r\x8a\xb5\x18\tGet state')




_LOADPAYLOADTEMPLATEGPB = descriptor.Descriptor(
  name='LoadPayloadTemplateGpb',
  full_name='a.elwood.LoadPayloadTemplateGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.LoadPayloadTemplateGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.LoadPayloadTemplateGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030\027Load a payload template'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=262,
  serialized_end=402,
)


_LOADDEFAULTTEMPLATEGPB = descriptor.Descriptor(
  name='LoadDefaultTemplateGpb',
  full_name='a.elwood.LoadDefaultTemplateGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.LoadDefaultTemplateGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.LoadDefaultTemplateGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030\037Load a default payload template'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=405,
  serialized_end=553,
)


_CLONEPAYLOADTEMPLATEGPB_INXGPB = descriptor.Descriptor(
  name='InxGpb',
  full_name='a.elwood.ClonePayloadTemplateGpb.InxGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='nameId', full_name='a.elwood.ClonePayloadTemplateGpb.InxGpb.nameId', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\0305Name to assign identifying the new template in elwood')),
    descriptor.FieldDescriptor(
      name='sourceTemplate', full_name='a.elwood.ClonePayloadTemplateGpb.InxGpb.sourceTemplate', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030&Name of existing template to copy from')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=668,
  serialized_end=819,
)

_CLONEPAYLOADTEMPLATEGPB = descriptor.Descriptor(
  name='ClonePayloadTemplateGpb',
  full_name='a.elwood.ClonePayloadTemplateGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.ClonePayloadTemplateGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.ClonePayloadTemplateGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_CLONEPAYLOADTEMPLATEGPB_INXGPB, ],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030#Copies an existing payload template'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=556,
  serialized_end=860,
)


_UNLOADPAYLOADTEMPLATEGPB = descriptor.Descriptor(
  name='UnloadPayloadTemplateGpb',
  full_name='a.elwood.UnloadPayloadTemplateGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.UnloadPayloadTemplateGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.UnloadPayloadTemplateGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030\031Unload a payload template'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=863,
  serialized_end=1007,
)


_UNLOADMULTIPLEPAYLOADTEMPLATESGPB_INXGPB = descriptor.Descriptor(
  name='InxGpb',
  full_name='a.elwood.UnloadMultiplePayloadTemplatesGpb.InxGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='templates', full_name='a.elwood.UnloadMultiplePayloadTemplatesGpb.InxGpb.templates', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=1141,
  serialized_end=1213,
)

_UNLOADMULTIPLEPAYLOADTEMPLATESGPB = descriptor.Descriptor(
  name='UnloadMultiplePayloadTemplatesGpb',
  full_name='a.elwood.UnloadMultiplePayloadTemplatesGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.UnloadMultiplePayloadTemplatesGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.UnloadMultiplePayloadTemplatesGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_UNLOADMULTIPLEPAYLOADTEMPLATESGPB_INXGPB, ],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030!Unload multiple payload templates'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=1010,
  serialized_end=1252,
)


_ISPAYLOADTEMPLATELOADEDGPB_INXGPB = descriptor.Descriptor(
  name='InxGpb',
  full_name='a.elwood.IsPayloadTemplateLoadedGpb.InxGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='nameId', full_name='a.elwood.IsPayloadTemplateLoadedGpb.InxGpb.nameId', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=1401,
  serialized_end=1425,
)

_ISPAYLOADTEMPLATELOADEDGPB_OUTXGPB = descriptor.Descriptor(
  name='OutxGpb',
  full_name='a.elwood.IsPayloadTemplateLoadedGpb.OutxGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='isLoaded', full_name='a.elwood.IsPayloadTemplateLoadedGpb.OutxGpb.isLoaded', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=1427,
  serialized_end=1454,
)

_ISPAYLOADTEMPLATELOADEDGPB = descriptor.Descriptor(
  name='IsPayloadTemplateLoadedGpb',
  full_name='a.elwood.IsPayloadTemplateLoadedGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.IsPayloadTemplateLoadedGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.IsPayloadTemplateLoadedGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_ISPAYLOADTEMPLATELOADEDGPB_INXGPB, _ISPAYLOADTEMPLATELOADEDGPB_OUTXGPB, ],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030\036Is the payload template loaded'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=1255,
  serialized_end=1490,
)


_LOCKTEMPLATEFOREDITINGGPB_INXGPB = descriptor.Descriptor(
  name='InxGpb',
  full_name='a.elwood.LockTemplateForEditingGpb.InxGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='nameId', full_name='a.elwood.LockTemplateForEditingGpb.InxGpb.nameId', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=1401,
  serialized_end=1425,
)

_LOCKTEMPLATEFOREDITINGGPB = descriptor.Descriptor(
  name='LockTemplateForEditingGpb',
  full_name='a.elwood.LockTemplateForEditingGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.LockTemplateForEditingGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.LockTemplateForEditingGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_LOCKTEMPLATEFOREDITINGGPB_INXGPB, ],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030\034Lock template before queuing'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=1493,
  serialized_end=1666,
)


_QUEUETEMPLATEFORTRANSMISSIONGPB = descriptor.Descriptor(
  name='QueueTemplateForTransmissionGpb',
  full_name='a.elwood.QueueTemplateForTransmissionGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.QueueTemplateForTransmissionGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.QueueTemplateForTransmissionGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030\'Queue an injection of a loaded template'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=1669,
  serialized_end=1836,
)


_QUEUEMULTIPLETEMPLATESFORTRANSMISSIONGPB_INXGPB = descriptor.Descriptor(
  name='InxGpb',
  full_name='a.elwood.QueueMultipleTemplatesForTransmissionGpb.InxGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='templates', full_name='a.elwood.QueueMultipleTemplatesForTransmissionGpb.InxGpb.templates', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=1984,
  serialized_end=2058,
)

_QUEUEMULTIPLETEMPLATESFORTRANSMISSIONGPB = descriptor.Descriptor(
  name='QueueMultipleTemplatesForTransmissionGpb',
  full_name='a.elwood.QueueMultipleTemplatesForTransmissionGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.QueueMultipleTemplatesForTransmissionGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.QueueMultipleTemplatesForTransmissionGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_QUEUEMULTIPLETEMPLATESFORTRANSMISSIONGPB_INXGPB, ],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030-Queue multiple injections of loaded templates'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=1839,
  serialized_end=2109,
)


_LOADCAPTUREFILEGPB = descriptor.Descriptor(
  name='LoadCaptureFileGpb',
  full_name='a.elwood.LoadCaptureFileGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.LoadCaptureFileGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.LoadCaptureFileGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030\035load a capture file to memory'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=2112,
  serialized_end=2241,
)


_UNLOADCAPTUREFILEGPB = descriptor.Descriptor(
  name='UnloadCaptureFileGpb',
  full_name='a.elwood.UnloadCaptureFileGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.UnloadCaptureFileGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.UnloadCaptureFileGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030!unload a capture file from memory'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=2244,
  serialized_end=2379,
)


_LOADCAPTURESFROMDIRGPB_INXGPB = descriptor.Descriptor(
  name='InxGpb',
  full_name='a.elwood.LoadCapturesFromDirGpb.InxGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='loadFromDir', full_name='a.elwood.LoadCapturesFromDirGpb.InxGpb.loadFromDir', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\0302Directory in filesystem to load from capture files')),
    descriptor.FieldDescriptor(
      name='loadNonDupOnCollision', full_name='a.elwood.LoadCapturesFromDirGpb.InxGpb.loadNonDupOnCollision', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\0301Load the non-duplicates incase of name collision ')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=2517,
  serialized_end=2695,
)

_LOADCAPTURESFROMDIRGPB_OUTXGPB = descriptor.Descriptor(
  name='OutxGpb',
  full_name='a.elwood.LoadCapturesFromDirGpb.OutxGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='nameIds', full_name='a.elwood.LoadCapturesFromDirGpb.OutxGpb.nameIds', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030\037Name IDs of all loaded captures')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=2697,
  serialized_end=2760,
)

_LOADCAPTURESFROMDIRGPB = descriptor.Descriptor(
  name='LoadCapturesFromDirGpb',
  full_name='a.elwood.LoadCapturesFromDirGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.LoadCapturesFromDirGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.LoadCapturesFromDirGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_LOADCAPTURESFROMDIRGPB_INXGPB, _LOADCAPTURESFROMDIRGPB_OUTXGPB, ],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030/load all capture files from directory to memory'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=2382,
  serialized_end=2813,
)


_ISCAPTUREFILELOADEDGPB_INXGPB = descriptor.Descriptor(
  name='InxGpb',
  full_name='a.elwood.IsCaptureFileLoadedGpb.InxGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='nameId', full_name='a.elwood.IsCaptureFileLoadedGpb.InxGpb.nameId', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=1401,
  serialized_end=1425,
)

_ISCAPTUREFILELOADEDGPB_OUTXGPB = descriptor.Descriptor(
  name='OutxGpb',
  full_name='a.elwood.IsCaptureFileLoadedGpb.OutxGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='isLoaded', full_name='a.elwood.IsCaptureFileLoadedGpb.OutxGpb.isLoaded', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=1427,
  serialized_end=1454,
)

_ISCAPTUREFILELOADEDGPB = descriptor.Descriptor(
  name='IsCaptureFileLoadedGpb',
  full_name='a.elwood.IsCaptureFileLoadedGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.IsCaptureFileLoadedGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.IsCaptureFileLoadedGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_ISCAPTUREFILELOADEDGPB_INXGPB, _ISCAPTUREFILELOADEDGPB_OUTXGPB, ],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030\032Is the capture file loaded'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=2816,
  serialized_end=3035,
)


_QUEUECAPTUREFORTRANSMISSIONGPB = descriptor.Descriptor(
  name='QueueCaptureForTransmissionGpb',
  full_name='a.elwood.QueueCaptureForTransmissionGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.QueueCaptureForTransmissionGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.QueueCaptureForTransmissionGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030?queue an injection of a capture file already loaded into memory'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=3038,
  serialized_end=3215,
)


_LOADCONTENTFILEGPB_INXGPB = descriptor.Descriptor(
  name='InxGpb',
  full_name='a.elwood.LoadContentFileGpb.InxGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='sourceFilename', full_name='a.elwood.LoadContentFileGpb.InxGpb.sourceFilename', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030\'content file in filesystem to load from')),
    descriptor.FieldDescriptor(
      name='nameId', full_name='a.elwood.LoadContentFileGpb.InxGpb.nameId', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=descriptor._ParseOptions(descriptor_pb2.FieldOptions(), '\212\265\030-name to assign identifyng the file in elwood.')),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=3320,
  serialized_end=3464,
)

_LOADCONTENTFILEGPB = descriptor.Descriptor(
  name='LoadContentFileGpb',
  full_name='a.elwood.LoadContentFileGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.LoadContentFileGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.LoadContentFileGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_LOADCONTENTFILEGPB_INXGPB, ],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030\035load a content file to memory'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=3218,
  serialized_end=3499,
)


_ISCONTENTFILELOADEDGPB_INXGPB = descriptor.Descriptor(
  name='InxGpb',
  full_name='a.elwood.IsContentFileLoadedGpb.InxGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='nameId', full_name='a.elwood.IsContentFileLoadedGpb.InxGpb.nameId', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=1401,
  serialized_end=1425,
)

_ISCONTENTFILELOADEDGPB_OUTXGPB = descriptor.Descriptor(
  name='OutxGpb',
  full_name='a.elwood.IsContentFileLoadedGpb.OutxGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='isLoaded', full_name='a.elwood.IsContentFileLoadedGpb.OutxGpb.isLoaded', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=1427,
  serialized_end=1454,
)

_ISCONTENTFILELOADEDGPB = descriptor.Descriptor(
  name='IsContentFileLoadedGpb',
  full_name='a.elwood.IsContentFileLoadedGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.IsContentFileLoadedGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.IsContentFileLoadedGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_ISCONTENTFILELOADEDGPB_INXGPB, _ISCONTENTFILELOADEDGPB_OUTXGPB, ],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030\032Is the content file loaded'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=3502,
  serialized_end=3721,
)


_GETLINEWORKERCOUNTERSGPB = descriptor.Descriptor(
  name='GetLineWorkerCountersGpb',
  full_name='a.elwood.GetLineWorkerCountersGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.GetLineWorkerCountersGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.GetLineWorkerCountersGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030)retrieve line workers statictics counters'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=3724,
  serialized_end=3879,
)


_STOPTRAFFICANDCLEARINSTANCESGPB = descriptor.Descriptor(
  name='StopTrafficAndClearInstancesGpb',
  full_name='a.elwood.StopTrafficAndClearInstancesGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.StopTrafficAndClearInstancesGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.StopTrafficAndClearInstancesGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030/Terminates all line instances and live sessions'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=3882,
  serialized_end=4027,
)


_STOPTRAFFICANDCLEARALLGPB = descriptor.Descriptor(
  name='StopTrafficAndClearAllGpb',
  full_name='a.elwood.StopTrafficAndClearAllGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.StopTrafficAndClearAllGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.StopTrafficAndClearAllGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030lTerminates all line instances and live sessions, removes templates, captures and clients and clears counters'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=4030,
  serialized_end=4230,
)


_GETINSTANCESSTATEGPB = descriptor.Descriptor(
  name='GetInstancesStateGpb',
  full_name='a.elwood.GetInstancesStateGpb',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='in', full_name='a.elwood.GetInstancesStateGpb.in', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='out', full_name='a.elwood.GetInstancesStateGpb.out', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=descriptor._ParseOptions(descriptor_pb2.MessageOptions(), '\212\265\030\tGet state'),
  is_extendable=False,
  extension_ranges=[],
  serialized_start=4232,
  serialized_end=4345,
)

import include.a.infra.prov.definitions_pb2
import include.a.elwood.cap.cap_replay_pb2
import include.a.elwood.core.definitions_pb2
import include.a.elwood.ptemplate.definitions_pb2
import include.a.elwood.ptemplate.payload_instance_pb2

_LOADPAYLOADTEMPLATEGPB.fields_by_name['in'].message_type = include.a.elwood.ptemplate.definitions_pb2._PAYLOADTEMPLATESETUPGPB
_LOADPAYLOADTEMPLATEGPB.fields_by_name['out'].message_type = include.a.infra.prov.definitions_pb2._NULLGPB
_LOADDEFAULTTEMPLATEGPB.fields_by_name['in'].message_type = include.a.elwood.ptemplate.definitions_pb2._PAYLOADTEMPLATESETUPGPB
_LOADDEFAULTTEMPLATEGPB.fields_by_name['out'].message_type = include.a.infra.prov.definitions_pb2._NULLGPB
_CLONEPAYLOADTEMPLATEGPB_INXGPB.containing_type = _CLONEPAYLOADTEMPLATEGPB;
_CLONEPAYLOADTEMPLATEGPB.fields_by_name['in'].message_type = _CLONEPAYLOADTEMPLATEGPB_INXGPB
_CLONEPAYLOADTEMPLATEGPB.fields_by_name['out'].message_type = include.a.infra.prov.definitions_pb2._NULLGPB
_UNLOADPAYLOADTEMPLATEGPB.fields_by_name['in'].message_type = include.a.elwood.ptemplate.definitions_pb2._PAYLOADTEMPLATESETUPGPB
_UNLOADPAYLOADTEMPLATEGPB.fields_by_name['out'].message_type = include.a.infra.prov.definitions_pb2._NULLGPB
_UNLOADMULTIPLEPAYLOADTEMPLATESGPB_INXGPB.fields_by_name['templates'].message_type = include.a.elwood.ptemplate.definitions_pb2._PAYLOADTEMPLATESETUPGPB
_UNLOADMULTIPLEPAYLOADTEMPLATESGPB_INXGPB.containing_type = _UNLOADMULTIPLEPAYLOADTEMPLATESGPB;
_UNLOADMULTIPLEPAYLOADTEMPLATESGPB.fields_by_name['in'].message_type = _UNLOADMULTIPLEPAYLOADTEMPLATESGPB_INXGPB
_UNLOADMULTIPLEPAYLOADTEMPLATESGPB.fields_by_name['out'].message_type = include.a.infra.prov.definitions_pb2._NULLGPB
_ISPAYLOADTEMPLATELOADEDGPB_INXGPB.containing_type = _ISPAYLOADTEMPLATELOADEDGPB;
_ISPAYLOADTEMPLATELOADEDGPB_OUTXGPB.containing_type = _ISPAYLOADTEMPLATELOADEDGPB;
_ISPAYLOADTEMPLATELOADEDGPB.fields_by_name['in'].message_type = _ISPAYLOADTEMPLATELOADEDGPB_INXGPB
_ISPAYLOADTEMPLATELOADEDGPB.fields_by_name['out'].message_type = _ISPAYLOADTEMPLATELOADEDGPB_OUTXGPB
_LOCKTEMPLATEFOREDITINGGPB_INXGPB.containing_type = _LOCKTEMPLATEFOREDITINGGPB;
_LOCKTEMPLATEFOREDITINGGPB.fields_by_name['in'].message_type = _LOCKTEMPLATEFOREDITINGGPB_INXGPB
_LOCKTEMPLATEFOREDITINGGPB.fields_by_name['out'].message_type = include.a.infra.prov.definitions_pb2._NULLGPB
_QUEUETEMPLATEFORTRANSMISSIONGPB.fields_by_name['in'].message_type = include.a.elwood.ptemplate.payload_instance_pb2._TEMPLATEGENERATEPARAMSGPB
_QUEUETEMPLATEFORTRANSMISSIONGPB.fields_by_name['out'].message_type = include.a.infra.prov.definitions_pb2._NULLGPB
_QUEUEMULTIPLETEMPLATESFORTRANSMISSIONGPB_INXGPB.fields_by_name['templates'].message_type = include.a.elwood.ptemplate.payload_instance_pb2._TEMPLATEGENERATEPARAMSGPB
_QUEUEMULTIPLETEMPLATESFORTRANSMISSIONGPB_INXGPB.containing_type = _QUEUEMULTIPLETEMPLATESFORTRANSMISSIONGPB;
_QUEUEMULTIPLETEMPLATESFORTRANSMISSIONGPB.fields_by_name['in'].message_type = _QUEUEMULTIPLETEMPLATESFORTRANSMISSIONGPB_INXGPB
_QUEUEMULTIPLETEMPLATESFORTRANSMISSIONGPB.fields_by_name['out'].message_type = include.a.infra.prov.definitions_pb2._NULLGPB
_LOADCAPTUREFILEGPB.fields_by_name['in'].message_type = include.a.elwood.cap.cap_replay_pb2._CAPLOADINGPARAMS
_LOADCAPTUREFILEGPB.fields_by_name['out'].message_type = include.a.infra.prov.definitions_pb2._NULLGPB
_UNLOADCAPTUREFILEGPB.fields_by_name['in'].message_type = include.a.elwood.cap.cap_replay_pb2._CAPLOADINGPARAMS
_UNLOADCAPTUREFILEGPB.fields_by_name['out'].message_type = include.a.infra.prov.definitions_pb2._NULLGPB
_LOADCAPTURESFROMDIRGPB_INXGPB.containing_type = _LOADCAPTURESFROMDIRGPB;
_LOADCAPTURESFROMDIRGPB_OUTXGPB.containing_type = _LOADCAPTURESFROMDIRGPB;
_LOADCAPTURESFROMDIRGPB.fields_by_name['in'].message_type = _LOADCAPTURESFROMDIRGPB_INXGPB
_LOADCAPTURESFROMDIRGPB.fields_by_name['out'].message_type = _LOADCAPTURESFROMDIRGPB_OUTXGPB
_ISCAPTUREFILELOADEDGPB_INXGPB.containing_type = _ISCAPTUREFILELOADEDGPB;
_ISCAPTUREFILELOADEDGPB_OUTXGPB.containing_type = _ISCAPTUREFILELOADEDGPB;
_ISCAPTUREFILELOADEDGPB.fields_by_name['in'].message_type = _ISCAPTUREFILELOADEDGPB_INXGPB
_ISCAPTUREFILELOADEDGPB.fields_by_name['out'].message_type = _ISCAPTUREFILELOADEDGPB_OUTXGPB
_QUEUECAPTUREFORTRANSMISSIONGPB.fields_by_name['in'].message_type = include.a.elwood.cap.cap_replay_pb2._CAPREPLAYPARAMSGPB
_QUEUECAPTUREFORTRANSMISSIONGPB.fields_by_name['out'].message_type = include.a.infra.prov.definitions_pb2._NULLGPB
_LOADCONTENTFILEGPB_INXGPB.containing_type = _LOADCONTENTFILEGPB;
_LOADCONTENTFILEGPB.fields_by_name['in'].message_type = _LOADCONTENTFILEGPB_INXGPB
_LOADCONTENTFILEGPB.fields_by_name['out'].message_type = include.a.infra.prov.definitions_pb2._NULLGPB
_ISCONTENTFILELOADEDGPB_INXGPB.containing_type = _ISCONTENTFILELOADEDGPB;
_ISCONTENTFILELOADEDGPB_OUTXGPB.containing_type = _ISCONTENTFILELOADEDGPB;
_ISCONTENTFILELOADEDGPB.fields_by_name['in'].message_type = _ISCONTENTFILELOADEDGPB_INXGPB
_ISCONTENTFILELOADEDGPB.fields_by_name['out'].message_type = _ISCONTENTFILELOADEDGPB_OUTXGPB
_GETLINEWORKERCOUNTERSGPB.fields_by_name['in'].message_type = include.a.infra.prov.definitions_pb2._NULLGPB
_GETLINEWORKERCOUNTERSGPB.fields_by_name['out'].message_type = include.a.elwood.core.definitions_pb2._LINEWORKERSTATISTICSGPB
_STOPTRAFFICANDCLEARINSTANCESGPB.fields_by_name['in'].message_type = include.a.infra.prov.definitions_pb2._NULLGPB
_STOPTRAFFICANDCLEARINSTANCESGPB.fields_by_name['out'].message_type = include.a.infra.prov.definitions_pb2._NULLGPB
_STOPTRAFFICANDCLEARALLGPB.fields_by_name['in'].message_type = include.a.infra.prov.definitions_pb2._NULLGPB
_STOPTRAFFICANDCLEARALLGPB.fields_by_name['out'].message_type = include.a.infra.prov.definitions_pb2._NULLGPB
_GETINSTANCESSTATEGPB.fields_by_name['in'].message_type = include.a.infra.prov.definitions_pb2._NULLGPB
_GETINSTANCESSTATEGPB.fields_by_name['out'].message_type = include.a.elwood.core.definitions_pb2._INSTANCESSTATEGPB

class LoadPayloadTemplateGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _LOADPAYLOADTEMPLATEGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.LoadPayloadTemplateGpb)

class LoadDefaultTemplateGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _LOADDEFAULTTEMPLATEGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.LoadDefaultTemplateGpb)

class ClonePayloadTemplateGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  
  class InxGpb(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _CLONEPAYLOADTEMPLATEGPB_INXGPB
    
    # @@protoc_insertion_point(class_scope:a.elwood.ClonePayloadTemplateGpb.InxGpb)
  DESCRIPTOR = _CLONEPAYLOADTEMPLATEGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.ClonePayloadTemplateGpb)

class UnloadPayloadTemplateGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _UNLOADPAYLOADTEMPLATEGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.UnloadPayloadTemplateGpb)

class UnloadMultiplePayloadTemplatesGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  
  class InxGpb(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _UNLOADMULTIPLEPAYLOADTEMPLATESGPB_INXGPB
    
    # @@protoc_insertion_point(class_scope:a.elwood.UnloadMultiplePayloadTemplatesGpb.InxGpb)
  DESCRIPTOR = _UNLOADMULTIPLEPAYLOADTEMPLATESGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.UnloadMultiplePayloadTemplatesGpb)

class IsPayloadTemplateLoadedGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  
  class InxGpb(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _ISPAYLOADTEMPLATELOADEDGPB_INXGPB
    
    # @@protoc_insertion_point(class_scope:a.elwood.IsPayloadTemplateLoadedGpb.InxGpb)
  
  class OutxGpb(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _ISPAYLOADTEMPLATELOADEDGPB_OUTXGPB
    
    # @@protoc_insertion_point(class_scope:a.elwood.IsPayloadTemplateLoadedGpb.OutxGpb)
  DESCRIPTOR = _ISPAYLOADTEMPLATELOADEDGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.IsPayloadTemplateLoadedGpb)

class LockTemplateForEditingGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  
  class InxGpb(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _LOCKTEMPLATEFOREDITINGGPB_INXGPB
    
    # @@protoc_insertion_point(class_scope:a.elwood.LockTemplateForEditingGpb.InxGpb)
  DESCRIPTOR = _LOCKTEMPLATEFOREDITINGGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.LockTemplateForEditingGpb)

class QueueTemplateForTransmissionGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _QUEUETEMPLATEFORTRANSMISSIONGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.QueueTemplateForTransmissionGpb)

class QueueMultipleTemplatesForTransmissionGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  
  class InxGpb(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _QUEUEMULTIPLETEMPLATESFORTRANSMISSIONGPB_INXGPB
    
    # @@protoc_insertion_point(class_scope:a.elwood.QueueMultipleTemplatesForTransmissionGpb.InxGpb)
  DESCRIPTOR = _QUEUEMULTIPLETEMPLATESFORTRANSMISSIONGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.QueueMultipleTemplatesForTransmissionGpb)

class LoadCaptureFileGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _LOADCAPTUREFILEGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.LoadCaptureFileGpb)

class UnloadCaptureFileGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _UNLOADCAPTUREFILEGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.UnloadCaptureFileGpb)

class LoadCapturesFromDirGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  
  class InxGpb(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _LOADCAPTURESFROMDIRGPB_INXGPB
    
    # @@protoc_insertion_point(class_scope:a.elwood.LoadCapturesFromDirGpb.InxGpb)
  
  class OutxGpb(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _LOADCAPTURESFROMDIRGPB_OUTXGPB
    
    # @@protoc_insertion_point(class_scope:a.elwood.LoadCapturesFromDirGpb.OutxGpb)
  DESCRIPTOR = _LOADCAPTURESFROMDIRGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.LoadCapturesFromDirGpb)

class IsCaptureFileLoadedGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  
  class InxGpb(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _ISCAPTUREFILELOADEDGPB_INXGPB
    
    # @@protoc_insertion_point(class_scope:a.elwood.IsCaptureFileLoadedGpb.InxGpb)
  
  class OutxGpb(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _ISCAPTUREFILELOADEDGPB_OUTXGPB
    
    # @@protoc_insertion_point(class_scope:a.elwood.IsCaptureFileLoadedGpb.OutxGpb)
  DESCRIPTOR = _ISCAPTUREFILELOADEDGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.IsCaptureFileLoadedGpb)

class QueueCaptureForTransmissionGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _QUEUECAPTUREFORTRANSMISSIONGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.QueueCaptureForTransmissionGpb)

class LoadContentFileGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  
  class InxGpb(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _LOADCONTENTFILEGPB_INXGPB
    
    # @@protoc_insertion_point(class_scope:a.elwood.LoadContentFileGpb.InxGpb)
  DESCRIPTOR = _LOADCONTENTFILEGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.LoadContentFileGpb)

class IsContentFileLoadedGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  
  class InxGpb(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _ISCONTENTFILELOADEDGPB_INXGPB
    
    # @@protoc_insertion_point(class_scope:a.elwood.IsContentFileLoadedGpb.InxGpb)
  
  class OutxGpb(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _ISCONTENTFILELOADEDGPB_OUTXGPB
    
    # @@protoc_insertion_point(class_scope:a.elwood.IsContentFileLoadedGpb.OutxGpb)
  DESCRIPTOR = _ISCONTENTFILELOADEDGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.IsContentFileLoadedGpb)

class GetLineWorkerCountersGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _GETLINEWORKERCOUNTERSGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.GetLineWorkerCountersGpb)

class StopTrafficAndClearInstancesGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _STOPTRAFFICANDCLEARINSTANCESGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.StopTrafficAndClearInstancesGpb)

class StopTrafficAndClearAllGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _STOPTRAFFICANDCLEARALLGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.StopTrafficAndClearAllGpb)

class GetInstancesStateGpb(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _GETINSTANCESSTATEGPB
  
  # @@protoc_insertion_point(class_scope:a.elwood.GetInstancesStateGpb)

# @@protoc_insertion_point(module_scope)
